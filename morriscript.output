Grammar

    0 $accept: translation_unit $end

    1 translation_unit: definition_or_statement
    2                 | translation_unit definition_or_statement

    3 definition_or_statement: function_definition
    4                        | anonymous_definition
    5                        | statement

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP block
    7                    | FUNCTION IDENTIFIER LP RP block

    8 anonymous_definition: LP parameter_list RP ARROW block
    9                     | LP RP ARROW block
   10                     | error SEMICOLON

   11 parameter_list: LET IDENTIFIER
   12               | LET IDENTIFIER COMMA parameter_list

   13 argument_list: expression
   14              | argument_list COMMA expression

   15 statement_list: statement
   16               | statement_list statement

   17 expression: logical_or_expression
   18           | IDENTIFIER ASSIGN expression
   19           | error RP

   20 logical_or_expression: logical_and_expression
   21                      | logical_or_expression LOGICAL_OR logical_and_expression

   22 logical_and_expression: equality_expression
   23                       | logical_and_expression LOGICAL_AND equality_expression

   24 equality_expression: relational_expression
   25                    | equality_expression EQ relational_expression
   26                    | equality_expression NE relational_expression

   27 relational_expression: additive_expression
   28                      | relational_expression GT additive_expression
   29                      | relational_expression GE additive_expression
   30                      | relational_expression LT additive_expression
   31                      | relational_expression LE additive_expression

   32 additive_expression: multiplicative_expression
   33                    | additive_expression ADD multiplicative_expression
   34                    | additive_expression SUB multiplicative_expression

   35 multiplicative_expression: unary_expression
   36                          | multiplicative_expression MUL unary_expression
   37                          | multiplicative_expression DIV unary_expression
   38                          | multiplicative_expression MOD unary_expression

   39 unary_expression: primary_expression
   40                 | SUB unary_expression

   41 primary_expression: IDENTIFIER LP argument_list RP
   42                   | IDENTIFIER LP RP
   43                   | LP expression RP
   44                   | IDENTIFIER
   45                   | INT_LITERAL
   46                   | DOUBLE_LITERAL
   47                   | STRING_LITERAL
   48                   | TRUE_T
   49                   | FALSE_T
   50                   | NULL_T

   51 statement: expression SEMICOLON
   52          | global_statement
   53          | let_statement
   54          | if_statement
   55          | while_statement
   56          | for_statement
   57          | return_statement
   58          | break_statement
   59          | continue_statement

   60 global_statement: GLOBAL_T identifier_list SEMICOLON

   61 let_statement: LET identifier_list SEMICOLON

   62 identifier_list: IDENTIFIER
   63                | IDENTIFIER LB INT_LITERAL RB
   64                | identifier_list COMMA IDENTIFIER

   65 if_statement: IF LP expression RP block
   66             | IF LP expression RP block ELSE block
   67             | IF LP expression RP block elsif_list
   68             | IF LP expression RP block elsif_list ELSE block

   69 elsif_list: elsif
   70           | elsif_list elsif

   71 elsif: ELSIF LP expression RP block

   72 while_statement: WHILE LP expression RP block

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

   74 expression_opt: /* empty */
   75               | expression

   76 return_statement: RETURN_T expression_opt SEMICOLON

   77 break_statement: BREAK SEMICOLON

   78 continue_statement: CONTINUE SEMICOLON

   79 block: LC statement_list RC
   80      | LC RC
   81      | error RC


Terminals, with rules where they appear

$end (0) 0
error (256) 10 19 81
INT_LITERAL (258) 45 63
DOUBLE_LITERAL (259) 46
STRING_LITERAL (260) 47
IDENTIFIER (261) 6 7 11 12 18 41 42 44 62 63 64
GLOBAL_T (262) 60
LET (263) 11 12 61
FUNCTION (264) 6 7
RETURN_T (265) 76
IF (266) 65 66 67 68
ELSE (267) 66 68
ELSIF (268) 71
TRUE_T (269) 48
FALSE_T (270) 49
NULL_T (271) 50
FOR (272) 73
WHILE (273) 72
BREAK (274) 77
CONTINUE (275) 78
LP (276) 6 7 8 9 41 42 43 65 66 67 68 71 72 73
RP (277) 6 7 8 9 19 41 42 43 65 66 67 68 71 72 73
LB (278) 63
RB (279) 63
LC (280) 79 80
RC (281) 79 80 81
SEMICOLON (282) 10 51 60 61 73 76 77 78
COMMA (283) 12 14 64
ARROW (284) 8 9
LOGICAL_AND (285) 23
LOGICAL_OR (286) 21
ASSIGN (287) 18
EQ (288) 25
NE (289) 26
GT (290) 28
GE (291) 29
LT (292) 30
LE (293) 31
ADD (294) 33
SUB (295) 34 40
MUL (296) 36
DIV (297) 37
MOD (298) 38


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
translation_unit (45)
    on left: 1 2, on right: 0 2
definition_or_statement (46)
    on left: 3 4 5, on right: 1 2
function_definition (47)
    on left: 6 7, on right: 3
anonymous_definition (48)
    on left: 8 9 10, on right: 4
parameter_list (49)
    on left: 11 12, on right: 6 8 12
argument_list (50)
    on left: 13 14, on right: 14 41
statement_list (51)
    on left: 15 16, on right: 16 79
expression (52)
    on left: 17 18 19, on right: 13 14 18 43 51 65 66 67 68 71 72 75
logical_or_expression (53)
    on left: 20 21, on right: 17 21
logical_and_expression (54)
    on left: 22 23, on right: 20 21 23
equality_expression (55)
    on left: 24 25 26, on right: 22 23 25 26
relational_expression (56)
    on left: 27 28 29 30 31, on right: 24 25 26 28 29 30 31
additive_expression (57)
    on left: 32 33 34, on right: 27 28 29 30 31 33 34
multiplicative_expression (58)
    on left: 35 36 37 38, on right: 32 33 34 36 37 38
unary_expression (59)
    on left: 39 40, on right: 35 36 37 38 40
primary_expression (60)
    on left: 41 42 43 44 45 46 47 48 49 50, on right: 39
statement (61)
    on left: 51 52 53 54 55 56 57 58 59, on right: 5 15 16
global_statement (62)
    on left: 60, on right: 52
let_statement (63)
    on left: 61, on right: 53
identifier_list (64)
    on left: 62 63 64, on right: 60 61 64
if_statement (65)
    on left: 65 66 67 68, on right: 54
elsif_list (66)
    on left: 69 70, on right: 67 68 70
elsif (67)
    on left: 71, on right: 69 70
while_statement (68)
    on left: 72, on right: 55
for_statement (69)
    on left: 73, on right: 56
expression_opt (70)
    on left: 74 75, on right: 73 76
return_statement (71)
    on left: 76, on right: 57
break_statement (72)
    on left: 77, on right: 58
continue_statement (73)
    on left: 78, on right: 59
block (74)
    on left: 79 80 81, on right: 6 7 8 9 65 66 67 68 71 72 73


state 0

    0 $accept: . translation_unit $end

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN_T        shift, and go to state 9
    IF              shift, and go to state 10
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    FOR             shift, and go to state 14
    WHILE           shift, and go to state 15
    BREAK           shift, and go to state 16
    CONTINUE        shift, and go to state 17
    LP              shift, and go to state 18
    SUB             shift, and go to state 19

    translation_unit           go to state 20
    definition_or_statement    go to state 21
    function_definition        go to state 22
    anonymous_definition       go to state 23
    expression                 go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    statement                  go to state 33
    global_statement           go to state 34
    let_statement              go to state 35
    if_statement               go to state 36
    while_statement            go to state 37
    for_statement              go to state 38
    return_statement           go to state 39
    break_statement            go to state 40
    continue_statement         go to state 41


state 1

   10 anonymous_definition: error . SEMICOLON
   19 expression: error . RP

    RP         shift, and go to state 42
    SEMICOLON  shift, and go to state 43


state 2

   45 primary_expression: INT_LITERAL .

    $default  reduce using rule 45 (primary_expression)


state 3

   46 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 46 (primary_expression)


state 4

   47 primary_expression: STRING_LITERAL .

    $default  reduce using rule 47 (primary_expression)


state 5

   18 expression: IDENTIFIER . ASSIGN expression
   41 primary_expression: IDENTIFIER . LP argument_list RP
   42                   | IDENTIFIER . LP RP
   44                   | IDENTIFIER .

    LP      shift, and go to state 44
    ASSIGN  shift, and go to state 45

    $default  reduce using rule 44 (primary_expression)


state 6

   60 global_statement: GLOBAL_T . identifier_list SEMICOLON

    IDENTIFIER  shift, and go to state 46

    identifier_list  go to state 47


state 7

   61 let_statement: LET . identifier_list SEMICOLON

    IDENTIFIER  shift, and go to state 46

    identifier_list  go to state 48


state 8

    6 function_definition: FUNCTION . IDENTIFIER LP parameter_list RP block
    7                    | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 49


state 9

   76 return_statement: RETURN_T . expression_opt SEMICOLON

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    SEMICOLON  reduce using rule 74 (expression_opt)

    expression                 go to state 52
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    expression_opt             go to state 53


state 10

   65 if_statement: IF . LP expression RP block
   66             | IF . LP expression RP block ELSE block
   67             | IF . LP expression RP block elsif_list
   68             | IF . LP expression RP block elsif_list ELSE block

    LP  shift, and go to state 54


state 11

   48 primary_expression: TRUE_T .

    $default  reduce using rule 48 (primary_expression)


state 12

   49 primary_expression: FALSE_T .

    $default  reduce using rule 49 (primary_expression)


state 13

   50 primary_expression: NULL_T .

    $default  reduce using rule 50 (primary_expression)


state 14

   73 for_statement: FOR . LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    LP  shift, and go to state 55


state 15

   72 while_statement: WHILE . LP expression RP block

    LP  shift, and go to state 56


state 16

   77 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 57


state 17

   78 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 58


state 18

    8 anonymous_definition: LP . parameter_list RP ARROW block
    9                     | LP . RP ARROW block
   43 primary_expression: LP . expression RP

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    LET             shift, and go to state 59
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    RP              shift, and go to state 60
    SUB             shift, and go to state 19

    parameter_list             go to state 61
    expression                 go to state 62
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 19

   40 unary_expression: SUB . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    unary_expression    go to state 64
    primary_expression  go to state 32


state 20

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . definition_or_statement

    $end            shift, and go to state 65
    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    RETURN_T        shift, and go to state 9
    IF              shift, and go to state 10
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    FOR             shift, and go to state 14
    WHILE           shift, and go to state 15
    BREAK           shift, and go to state 16
    CONTINUE        shift, and go to state 17
    LP              shift, and go to state 18
    SUB             shift, and go to state 19

    definition_or_statement    go to state 66
    function_definition        go to state 22
    anonymous_definition       go to state 23
    expression                 go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    statement                  go to state 33
    global_statement           go to state 34
    let_statement              go to state 35
    if_statement               go to state 36
    while_statement            go to state 37
    for_statement              go to state 38
    return_statement           go to state 39
    break_statement            go to state 40
    continue_statement         go to state 41


state 21

    1 translation_unit: definition_or_statement .

    $default  reduce using rule 1 (translation_unit)


state 22

    3 definition_or_statement: function_definition .

    $default  reduce using rule 3 (definition_or_statement)


state 23

    4 definition_or_statement: anonymous_definition .

    $default  reduce using rule 4 (definition_or_statement)


state 24

   51 statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 67


state 25

   17 expression: logical_or_expression .
   21 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 68

    $default  reduce using rule 17 (expression)


state 26

   20 logical_or_expression: logical_and_expression .
   23 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 69

    $default  reduce using rule 20 (logical_or_expression)


state 27

   22 logical_and_expression: equality_expression .
   25 equality_expression: equality_expression . EQ relational_expression
   26                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 22 (logical_and_expression)


state 28

   24 equality_expression: relational_expression .
   28 relational_expression: relational_expression . GT additive_expression
   29                      | relational_expression . GE additive_expression
   30                      | relational_expression . LT additive_expression
   31                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 24 (equality_expression)


state 29

   27 relational_expression: additive_expression .
   33 additive_expression: additive_expression . ADD multiplicative_expression
   34                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 27 (relational_expression)


state 30

   32 additive_expression: multiplicative_expression .
   36 multiplicative_expression: multiplicative_expression . MUL unary_expression
   37                          | multiplicative_expression . DIV unary_expression
   38                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 32 (additive_expression)


state 31

   35 multiplicative_expression: unary_expression .

    $default  reduce using rule 35 (multiplicative_expression)


state 32

   39 unary_expression: primary_expression .

    $default  reduce using rule 39 (unary_expression)


state 33

    5 definition_or_statement: statement .

    $default  reduce using rule 5 (definition_or_statement)


state 34

   52 statement: global_statement .

    $default  reduce using rule 52 (statement)


state 35

   53 statement: let_statement .

    $default  reduce using rule 53 (statement)


state 36

   54 statement: if_statement .

    $default  reduce using rule 54 (statement)


state 37

   55 statement: while_statement .

    $default  reduce using rule 55 (statement)


state 38

   56 statement: for_statement .

    $default  reduce using rule 56 (statement)


state 39

   57 statement: return_statement .

    $default  reduce using rule 57 (statement)


state 40

   58 statement: break_statement .

    $default  reduce using rule 58 (statement)


state 41

   59 statement: continue_statement .

    $default  reduce using rule 59 (statement)


state 42

   19 expression: error RP .

    $default  reduce using rule 19 (expression)


state 43

   10 anonymous_definition: error SEMICOLON .

    $default  reduce using rule 10 (anonymous_definition)


state 44

   41 primary_expression: IDENTIFIER LP . argument_list RP
   42                   | IDENTIFIER LP . RP

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    RP              shift, and go to state 81
    SUB             shift, and go to state 19

    argument_list              go to state 82
    expression                 go to state 83
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 45

   18 expression: IDENTIFIER ASSIGN . expression

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 84
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 46

   62 identifier_list: IDENTIFIER .
   63                | IDENTIFIER . LB INT_LITERAL RB

    LB  shift, and go to state 85

    $default  reduce using rule 62 (identifier_list)


state 47

   60 global_statement: GLOBAL_T identifier_list . SEMICOLON
   64 identifier_list: identifier_list . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 86
    COMMA      shift, and go to state 87


state 48

   61 let_statement: LET identifier_list . SEMICOLON
   64 identifier_list: identifier_list . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 88
    COMMA      shift, and go to state 87


state 49

    6 function_definition: FUNCTION IDENTIFIER . LP parameter_list RP block
    7                    | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 89


state 50

   19 expression: error . RP

    RP  shift, and go to state 42


state 51

   43 primary_expression: LP . expression RP

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 62
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 52

   75 expression_opt: expression .

    $default  reduce using rule 75 (expression_opt)


state 53

   76 return_statement: RETURN_T expression_opt . SEMICOLON

    SEMICOLON  shift, and go to state 90


state 54

   65 if_statement: IF LP . expression RP block
   66             | IF LP . expression RP block ELSE block
   67             | IF LP . expression RP block elsif_list
   68             | IF LP . expression RP block elsif_list ELSE block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 91
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 55

   73 for_statement: FOR LP . expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    SEMICOLON  reduce using rule 74 (expression_opt)

    expression                 go to state 52
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    expression_opt             go to state 92


state 56

   72 while_statement: WHILE LP . expression RP block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 93
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 57

   77 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 77 (break_statement)


state 58

   78 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 78 (continue_statement)


state 59

   11 parameter_list: LET . IDENTIFIER
   12               | LET . IDENTIFIER COMMA parameter_list

    IDENTIFIER  shift, and go to state 94


state 60

    9 anonymous_definition: LP RP . ARROW block

    ARROW  shift, and go to state 95


state 61

    8 anonymous_definition: LP parameter_list . RP ARROW block

    RP  shift, and go to state 96


state 62

   43 primary_expression: LP expression . RP

    RP  shift, and go to state 97


state 63

   41 primary_expression: IDENTIFIER . LP argument_list RP
   42                   | IDENTIFIER . LP RP
   44                   | IDENTIFIER .

    LP  shift, and go to state 44

    $default  reduce using rule 44 (primary_expression)


state 64

   40 unary_expression: SUB unary_expression .

    $default  reduce using rule 40 (unary_expression)


state 65

    0 $accept: translation_unit $end .

    $default  accept


state 66

    2 translation_unit: translation_unit definition_or_statement .

    $default  reduce using rule 2 (translation_unit)


state 67

   51 statement: expression SEMICOLON .

    $default  reduce using rule 51 (statement)


state 68

   21 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    logical_and_expression     go to state 98
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 69

   23 logical_and_expression: logical_and_expression LOGICAL_AND . equality_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    equality_expression        go to state 99
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 70

   25 equality_expression: equality_expression EQ . relational_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    relational_expression      go to state 100
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 71

   26 equality_expression: equality_expression NE . relational_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    relational_expression      go to state 101
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 72

   28 relational_expression: relational_expression GT . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    additive_expression        go to state 102
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 73

   29 relational_expression: relational_expression GE . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    additive_expression        go to state 103
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 74

   30 relational_expression: relational_expression LT . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    additive_expression        go to state 104
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 75

   31 relational_expression: relational_expression LE . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    additive_expression        go to state 105
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 76

   33 additive_expression: additive_expression ADD . multiplicative_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    multiplicative_expression  go to state 106
    unary_expression           go to state 31
    primary_expression         go to state 32


state 77

   34 additive_expression: additive_expression SUB . multiplicative_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    multiplicative_expression  go to state 107
    unary_expression           go to state 31
    primary_expression         go to state 32


state 78

   36 multiplicative_expression: multiplicative_expression MUL . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    unary_expression    go to state 108
    primary_expression  go to state 32


state 79

   37 multiplicative_expression: multiplicative_expression DIV . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    unary_expression    go to state 109
    primary_expression  go to state 32


state 80

   38 multiplicative_expression: multiplicative_expression MOD . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 63
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    unary_expression    go to state 110
    primary_expression  go to state 32


state 81

   42 primary_expression: IDENTIFIER LP RP .

    $default  reduce using rule 42 (primary_expression)


state 82

   14 argument_list: argument_list . COMMA expression
   41 primary_expression: IDENTIFIER LP argument_list . RP

    RP     shift, and go to state 111
    COMMA  shift, and go to state 112


state 83

   13 argument_list: expression .

    $default  reduce using rule 13 (argument_list)


state 84

   18 expression: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 18 (expression)


state 85

   63 identifier_list: IDENTIFIER LB . INT_LITERAL RB

    INT_LITERAL  shift, and go to state 113


state 86

   60 global_statement: GLOBAL_T identifier_list SEMICOLON .

    $default  reduce using rule 60 (global_statement)


state 87

   64 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 114


state 88

   61 let_statement: LET identifier_list SEMICOLON .

    $default  reduce using rule 61 (let_statement)


state 89

    6 function_definition: FUNCTION IDENTIFIER LP . parameter_list RP block
    7                    | FUNCTION IDENTIFIER LP . RP block

    LET  shift, and go to state 59
    RP   shift, and go to state 115

    parameter_list  go to state 116


state 90

   76 return_statement: RETURN_T expression_opt SEMICOLON .

    $default  reduce using rule 76 (return_statement)


state 91

   65 if_statement: IF LP expression . RP block
   66             | IF LP expression . RP block ELSE block
   67             | IF LP expression . RP block elsif_list
   68             | IF LP expression . RP block elsif_list ELSE block

    RP  shift, and go to state 117


state 92

   73 for_statement: FOR LP expression_opt . SEMICOLON expression_opt SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 118


state 93

   72 while_statement: WHILE LP expression . RP block

    RP  shift, and go to state 119


state 94

   11 parameter_list: LET IDENTIFIER .
   12               | LET IDENTIFIER . COMMA parameter_list

    COMMA  shift, and go to state 120

    $default  reduce using rule 11 (parameter_list)


state 95

    9 anonymous_definition: LP RP ARROW . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 123


state 96

    8 anonymous_definition: LP parameter_list RP . ARROW block

    ARROW  shift, and go to state 124


state 97

   43 primary_expression: LP expression RP .

    $default  reduce using rule 43 (primary_expression)


state 98

   21 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .
   23 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 69

    $default  reduce using rule 21 (logical_or_expression)


state 99

   23 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression .
   25 equality_expression: equality_expression . EQ relational_expression
   26                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 23 (logical_and_expression)


state 100

   25 equality_expression: equality_expression EQ relational_expression .
   28 relational_expression: relational_expression . GT additive_expression
   29                      | relational_expression . GE additive_expression
   30                      | relational_expression . LT additive_expression
   31                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 25 (equality_expression)


state 101

   26 equality_expression: equality_expression NE relational_expression .
   28 relational_expression: relational_expression . GT additive_expression
   29                      | relational_expression . GE additive_expression
   30                      | relational_expression . LT additive_expression
   31                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 26 (equality_expression)


state 102

   28 relational_expression: relational_expression GT additive_expression .
   33 additive_expression: additive_expression . ADD multiplicative_expression
   34                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 28 (relational_expression)


state 103

   29 relational_expression: relational_expression GE additive_expression .
   33 additive_expression: additive_expression . ADD multiplicative_expression
   34                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 29 (relational_expression)


state 104

   30 relational_expression: relational_expression LT additive_expression .
   33 additive_expression: additive_expression . ADD multiplicative_expression
   34                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 30 (relational_expression)


state 105

   31 relational_expression: relational_expression LE additive_expression .
   33 additive_expression: additive_expression . ADD multiplicative_expression
   34                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 31 (relational_expression)


state 106

   33 additive_expression: additive_expression ADD multiplicative_expression .
   36 multiplicative_expression: multiplicative_expression . MUL unary_expression
   37                          | multiplicative_expression . DIV unary_expression
   38                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 33 (additive_expression)


state 107

   34 additive_expression: additive_expression SUB multiplicative_expression .
   36 multiplicative_expression: multiplicative_expression . MUL unary_expression
   37                          | multiplicative_expression . DIV unary_expression
   38                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 34 (additive_expression)


state 108

   36 multiplicative_expression: multiplicative_expression MUL unary_expression .

    $default  reduce using rule 36 (multiplicative_expression)


state 109

   37 multiplicative_expression: multiplicative_expression DIV unary_expression .

    $default  reduce using rule 37 (multiplicative_expression)


state 110

   38 multiplicative_expression: multiplicative_expression MOD unary_expression .

    $default  reduce using rule 38 (multiplicative_expression)


state 111

   41 primary_expression: IDENTIFIER LP argument_list RP .

    $default  reduce using rule 41 (primary_expression)


state 112

   14 argument_list: argument_list COMMA . expression

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 125
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 113

   63 identifier_list: IDENTIFIER LB INT_LITERAL . RB

    RB  shift, and go to state 126


state 114

   64 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 64 (identifier_list)


state 115

    7 function_definition: FUNCTION IDENTIFIER LP RP . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 127


state 116

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list . RP block

    RP  shift, and go to state 128


state 117

   65 if_statement: IF LP expression RP . block
   66             | IF LP expression RP . block ELSE block
   67             | IF LP expression RP . block elsif_list
   68             | IF LP expression RP . block elsif_list ELSE block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 129


state 118

   73 for_statement: FOR LP expression_opt SEMICOLON . expression_opt SEMICOLON expression_opt RP block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    SEMICOLON  reduce using rule 74 (expression_opt)

    expression                 go to state 52
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    expression_opt             go to state 130


state 119

   72 while_statement: WHILE LP expression RP . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 131


state 120

   12 parameter_list: LET IDENTIFIER COMMA . parameter_list

    LET  shift, and go to state 59

    parameter_list  go to state 132


state 121

   81 block: error . RC

    RC  shift, and go to state 133


state 122

   79 block: LC . statement_list RC
   80      | LC . RC

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    RETURN_T        shift, and go to state 9
    IF              shift, and go to state 10
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    FOR             shift, and go to state 14
    WHILE           shift, and go to state 15
    BREAK           shift, and go to state 16
    CONTINUE        shift, and go to state 17
    LP              shift, and go to state 51
    RC              shift, and go to state 134
    SUB             shift, and go to state 19

    statement_list             go to state 135
    expression                 go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    statement                  go to state 136
    global_statement           go to state 34
    let_statement              go to state 35
    if_statement               go to state 36
    while_statement            go to state 37
    for_statement              go to state 38
    return_statement           go to state 39
    break_statement            go to state 40
    continue_statement         go to state 41


state 123

    9 anonymous_definition: LP RP ARROW block .

    $default  reduce using rule 9 (anonymous_definition)


state 124

    8 anonymous_definition: LP parameter_list RP ARROW . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 137


state 125

   14 argument_list: argument_list COMMA expression .

    $default  reduce using rule 14 (argument_list)


state 126

   63 identifier_list: IDENTIFIER LB INT_LITERAL RB .

    $default  reduce using rule 63 (identifier_list)


state 127

    7 function_definition: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 7 (function_definition)


state 128

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 138


state 129

   65 if_statement: IF LP expression RP block .
   66             | IF LP expression RP block . ELSE block
   67             | IF LP expression RP block . elsif_list
   68             | IF LP expression RP block . elsif_list ELSE block

    ELSE   shift, and go to state 139
    ELSIF  shift, and go to state 140

    $default  reduce using rule 65 (if_statement)

    elsif_list  go to state 141
    elsif       go to state 142


state 130

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt . SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 143


state 131

   72 while_statement: WHILE LP expression RP block .

    $default  reduce using rule 72 (while_statement)


state 132

   12 parameter_list: LET IDENTIFIER COMMA parameter_list .

    $default  reduce using rule 12 (parameter_list)


state 133

   81 block: error RC .

    $default  reduce using rule 81 (block)


state 134

   80 block: LC RC .

    $default  reduce using rule 80 (block)


state 135

   16 statement_list: statement_list . statement
   79 block: LC statement_list . RC

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    RETURN_T        shift, and go to state 9
    IF              shift, and go to state 10
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    FOR             shift, and go to state 14
    WHILE           shift, and go to state 15
    BREAK           shift, and go to state 16
    CONTINUE        shift, and go to state 17
    LP              shift, and go to state 51
    RC              shift, and go to state 144
    SUB             shift, and go to state 19

    expression                 go to state 24
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    statement                  go to state 145
    global_statement           go to state 34
    let_statement              go to state 35
    if_statement               go to state 36
    while_statement            go to state 37
    for_statement              go to state 38
    return_statement           go to state 39
    break_statement            go to state 40
    continue_statement         go to state 41


state 136

   15 statement_list: statement .

    $default  reduce using rule 15 (statement_list)


state 137

    8 anonymous_definition: LP parameter_list RP ARROW block .

    $default  reduce using rule 8 (anonymous_definition)


state 138

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP block .

    $default  reduce using rule 6 (function_definition)


state 139

   66 if_statement: IF LP expression RP block ELSE . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 146


state 140

   71 elsif: ELSIF . LP expression RP block

    LP  shift, and go to state 147


state 141

   67 if_statement: IF LP expression RP block elsif_list .
   68             | IF LP expression RP block elsif_list . ELSE block
   70 elsif_list: elsif_list . elsif

    ELSE   shift, and go to state 148
    ELSIF  shift, and go to state 140

    $default  reduce using rule 67 (if_statement)

    elsif  go to state 149


state 142

   69 elsif_list: elsif .

    $default  reduce using rule 69 (elsif_list)


state 143

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON . expression_opt RP block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    RP  reduce using rule 74 (expression_opt)

    expression                 go to state 52
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32
    expression_opt             go to state 150


state 144

   79 block: LC statement_list RC .

    $default  reduce using rule 79 (block)


state 145

   16 statement_list: statement_list statement .

    $default  reduce using rule 16 (statement_list)


state 146

   66 if_statement: IF LP expression RP block ELSE block .

    $default  reduce using rule 66 (if_statement)


state 147

   71 elsif: ELSIF LP . expression RP block

    error           shift, and go to state 50
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 11
    FALSE_T         shift, and go to state 12
    NULL_T          shift, and go to state 13
    LP              shift, and go to state 51
    SUB             shift, and go to state 19

    expression                 go to state 151
    logical_or_expression      go to state 25
    logical_and_expression     go to state 26
    equality_expression        go to state 27
    relational_expression      go to state 28
    additive_expression        go to state 29
    multiplicative_expression  go to state 30
    unary_expression           go to state 31
    primary_expression         go to state 32


state 148

   68 if_statement: IF LP expression RP block elsif_list ELSE . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 152


state 149

   70 elsif_list: elsif_list elsif .

    $default  reduce using rule 70 (elsif_list)


state 150

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt . RP block

    RP  shift, and go to state 153


state 151

   71 elsif: ELSIF LP expression . RP block

    RP  shift, and go to state 154


state 152

   68 if_statement: IF LP expression RP block elsif_list ELSE block .

    $default  reduce using rule 68 (if_statement)


state 153

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 155


state 154

   71 elsif: ELSIF LP expression RP . block

    error  shift, and go to state 121
    LC     shift, and go to state 122

    block  go to state 156


state 155

   73 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block .

    $default  reduce using rule 73 (for_statement)


state 156

   71 elsif: ELSIF LP expression RP block .

    $default  reduce using rule 71 (elsif)
