Grammar

    0 $accept: translation_unit $end

    1 translation_unit: definition_or_statement
    2                 | translation_unit definition_or_statement

    3 definition_or_statement: function_definition
    4                        | class_definition
    5                        | statement

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP block
    7                    | FUNCTION IDENTIFIER LP RP block

    8 class_definition: CLASS IDENTIFIER block

    9 parameter_list: LET IDENTIFIER
   10               | LET IDENTIFIER LB RB
   11               | LET IDENTIFIER COMMA parameter_list

   12 argument_list: expression
   13              | argument_list COMMA expression

   14 statement_list: statement
   15               | statement_list statement

   16 expression: logical_or_expression
   17           | primary_expression ASSIGN expression
   18           | error RP

   19 logical_or_expression: logical_and_expression
   20                      | logical_or_expression LOGICAL_OR logical_and_expression

   21 logical_and_expression: equality_expression
   22                       | logical_and_expression LOGICAL_AND equality_expression

   23 equality_expression: relational_expression
   24                    | equality_expression EQ relational_expression
   25                    | equality_expression NE relational_expression

   26 relational_expression: additive_expression
   27                      | relational_expression GT additive_expression
   28                      | relational_expression GE additive_expression
   29                      | relational_expression LT additive_expression
   30                      | relational_expression LE additive_expression

   31 additive_expression: multiplicative_expression
   32                    | additive_expression ADD multiplicative_expression
   33                    | additive_expression SUB multiplicative_expression

   34 multiplicative_expression: unary_expression
   35                          | multiplicative_expression MUL unary_expression
   36                          | multiplicative_expression DIV unary_expression
   37                          | multiplicative_expression MOD unary_expression

   38 unary_expression: primary_expression
   39                 | SUB unary_expression

   40 primary_expression: IDENTIFIER LP argument_list RP
   41                   | IDENTIFIER LP RP
   42                   | IDENTIFIER LB primary_expression RB
   43                   | IDENTIFIER DOT IDENTIFIER
   44                   | NEW IDENTIFIER LP RP
   45                   | LP expression RP
   46                   | IDENTIFIER
   47                   | INT_LITERAL
   48                   | DOUBLE_LITERAL
   49                   | STRING_LITERAL
   50                   | TRUE_T
   51                   | FALSE_T
   52                   | NULL_T
   53                   | closure_definition

   54 closure_definition: LP parameter_list RP CLOSURE block
   55                   | LP RP CLOSURE block

   56 statement: expression SEMICOLON
   57          | global_statement
   58          | let_statement
   59          | if_statement
   60          | while_statement
   61          | for_statement
   62          | return_statement
   63          | break_statement
   64          | continue_statement

   65 global_statement: GLOBAL_T identifier_list SEMICOLON

   66 let_statement: LET identifier_list SEMICOLON

   67 identifier_list: IDENTIFIER
   68                | identifier_list COMMA IDENTIFIER

   69 if_statement: IF LP expression RP block
   70             | IF LP expression RP block ELSE block
   71             | IF LP expression RP block elsif_list
   72             | IF LP expression RP block elsif_list ELSE block

   73 elsif_list: elsif
   74           | elsif_list elsif

   75 elsif: ELSIF LP expression RP block

   76 while_statement: WHILE LP expression RP block

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

   78 expression_opt: %empty
   79               | expression

   80 return_statement: RETURN_T expression_opt SEMICOLON

   81 break_statement: BREAK SEMICOLON

   82 continue_statement: CONTINUE SEMICOLON

   83 block: LC statement_list RC
   84      | LC RC
   85      | error RC


Terminals, with rules where they appear

$end (0) 0
error (256) 18 85
INT_LITERAL (258) 47
DOUBLE_LITERAL (259) 48
STRING_LITERAL (260) 49
IDENTIFIER (261) 6 7 8 9 10 11 40 41 42 43 44 46 67 68
GLOBAL_T (262) 65
LET (263) 9 10 11 66
FUNCTION (264) 6 7
CLASS (265) 8
RETURN_T (266) 80
IF (267) 69 70 71 72
ELSE (268) 70 72
ELSIF (269) 75
TRUE_T (270) 50
FALSE_T (271) 51
NULL_T (272) 52
FOR (273) 77
WHILE (274) 76
BREAK (275) 81
CONTINUE (276) 82
LP (277) 6 7 40 41 44 45 54 55 69 70 71 72 75 76 77
RP (278) 6 7 18 40 41 44 45 54 55 69 70 71 72 75 76 77
LB (279) 10 42
RB (280) 10 42
LC (281) 83 84
RC (282) 83 84 85
SEMICOLON (283) 56 65 66 77 80 81 82
COMMA (284) 11 13 68
CLOSURE (285) 54 55
DOT (286) 43
LOGICAL_AND (287) 22
LOGICAL_OR (288) 20
ASSIGN (289) 17
EQ (290) 24
NE (291) 25
GT (292) 27
GE (293) 28
LT (294) 29
LE (295) 30
ADD (296) 32
SUB (297) 33 39
MUL (298) 35
DIV (299) 36
MOD (300) 37
NEW (301) 44


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
translation_unit (48)
    on left: 1 2, on right: 0 2
definition_or_statement (49)
    on left: 3 4 5, on right: 1 2
function_definition (50)
    on left: 6 7, on right: 3
class_definition (51)
    on left: 8, on right: 4
parameter_list (52)
    on left: 9 10 11, on right: 6 11 54
argument_list (53)
    on left: 12 13, on right: 13 40
statement_list (54)
    on left: 14 15, on right: 15 83
expression (55)
    on left: 16 17 18, on right: 12 13 17 45 56 69 70 71 72 75 76 79
logical_or_expression (56)
    on left: 19 20, on right: 16 20
logical_and_expression (57)
    on left: 21 22, on right: 19 20 22
equality_expression (58)
    on left: 23 24 25, on right: 21 22 24 25
relational_expression (59)
    on left: 26 27 28 29 30, on right: 23 24 25 27 28 29 30
additive_expression (60)
    on left: 31 32 33, on right: 26 27 28 29 30 32 33
multiplicative_expression (61)
    on left: 34 35 36 37, on right: 31 32 33 35 36 37
unary_expression (62)
    on left: 38 39, on right: 34 35 36 37 39
primary_expression (63)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53, on right: 17
    38 42
closure_definition (64)
    on left: 54 55, on right: 53
statement (65)
    on left: 56 57 58 59 60 61 62 63 64, on right: 5 14 15
global_statement (66)
    on left: 65, on right: 57
let_statement (67)
    on left: 66, on right: 58
identifier_list (68)
    on left: 67 68, on right: 65 66 68
if_statement (69)
    on left: 69 70 71 72, on right: 59
elsif_list (70)
    on left: 73 74, on right: 71 72 74
elsif (71)
    on left: 75, on right: 73 74
while_statement (72)
    on left: 76, on right: 60
for_statement (73)
    on left: 77, on right: 61
expression_opt (74)
    on left: 78 79, on right: 77 80
return_statement (75)
    on left: 80, on right: 62
break_statement (76)
    on left: 81, on right: 63
continue_statement (77)
    on left: 82, on right: 64
block (78)
    on left: 83 84 85, on right: 6 7 8 54 55 69 70 71 72 75 76 77


State 0

    0 $accept: . translation_unit $end

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    CLASS           shift, and go to state 9
    RETURN_T        shift, and go to state 10
    IF              shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    FOR             shift, and go to state 15
    WHILE           shift, and go to state 16
    BREAK           shift, and go to state 17
    CONTINUE        shift, and go to state 18
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    translation_unit           go to state 22
    definition_or_statement    go to state 23
    function_definition        go to state 24
    class_definition           go to state 25
    expression                 go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    statement                  go to state 36
    global_statement           go to state 37
    let_statement              go to state 38
    if_statement               go to state 39
    while_statement            go to state 40
    for_statement              go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44


State 1

   18 expression: error . RP

    RP  shift, and go to state 45


State 2

   47 primary_expression: INT_LITERAL .

    $default  reduce using rule 47 (primary_expression)


State 3

   48 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 48 (primary_expression)


State 4

   49 primary_expression: STRING_LITERAL .

    $default  reduce using rule 49 (primary_expression)


State 5

   40 primary_expression: IDENTIFIER . LP argument_list RP
   41                   | IDENTIFIER . LP RP
   42                   | IDENTIFIER . LB primary_expression RB
   43                   | IDENTIFIER . DOT IDENTIFIER
   46                   | IDENTIFIER .

    LP   shift, and go to state 46
    LB   shift, and go to state 47
    DOT  shift, and go to state 48

    $default  reduce using rule 46 (primary_expression)


State 6

   65 global_statement: GLOBAL_T . identifier_list SEMICOLON

    IDENTIFIER  shift, and go to state 49

    identifier_list  go to state 50


State 7

   66 let_statement: LET . identifier_list SEMICOLON

    IDENTIFIER  shift, and go to state 49

    identifier_list  go to state 51


State 8

    6 function_definition: FUNCTION . IDENTIFIER LP parameter_list RP block
    7                    | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 52


State 9

    8 class_definition: CLASS . IDENTIFIER block

    IDENTIFIER  shift, and go to state 53


State 10

   80 return_statement: RETURN_T . expression_opt SEMICOLON

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    SEMICOLON  reduce using rule 78 (expression_opt)

    expression                 go to state 54
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    expression_opt             go to state 55


State 11

   69 if_statement: IF . LP expression RP block
   70             | IF . LP expression RP block ELSE block
   71             | IF . LP expression RP block elsif_list
   72             | IF . LP expression RP block elsif_list ELSE block

    LP  shift, and go to state 56


State 12

   50 primary_expression: TRUE_T .

    $default  reduce using rule 50 (primary_expression)


State 13

   51 primary_expression: FALSE_T .

    $default  reduce using rule 51 (primary_expression)


State 14

   52 primary_expression: NULL_T .

    $default  reduce using rule 52 (primary_expression)


State 15

   77 for_statement: FOR . LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    LP  shift, and go to state 57


State 16

   76 while_statement: WHILE . LP expression RP block

    LP  shift, and go to state 58


State 17

   81 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 59


State 18

   82 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 60


State 19

   45 primary_expression: LP . expression RP
   54 closure_definition: LP . parameter_list RP CLOSURE block
   55                   | LP . RP CLOSURE block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    LET             shift, and go to state 61
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    RP              shift, and go to state 62
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    parameter_list             go to state 63
    expression                 go to state 64
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 20

   39 unary_expression: SUB . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    unary_expression    go to state 65
    primary_expression  go to state 66
    closure_definition  go to state 35


State 21

   44 primary_expression: NEW . IDENTIFIER LP RP

    IDENTIFIER  shift, and go to state 67


State 22

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . definition_or_statement

    $end            shift, and go to state 68
    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    CLASS           shift, and go to state 9
    RETURN_T        shift, and go to state 10
    IF              shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    FOR             shift, and go to state 15
    WHILE           shift, and go to state 16
    BREAK           shift, and go to state 17
    CONTINUE        shift, and go to state 18
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    definition_or_statement    go to state 69
    function_definition        go to state 24
    class_definition           go to state 25
    expression                 go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    statement                  go to state 36
    global_statement           go to state 37
    let_statement              go to state 38
    if_statement               go to state 39
    while_statement            go to state 40
    for_statement              go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44


State 23

    1 translation_unit: definition_or_statement .

    $default  reduce using rule 1 (translation_unit)


State 24

    3 definition_or_statement: function_definition .

    $default  reduce using rule 3 (definition_or_statement)


State 25

    4 definition_or_statement: class_definition .

    $default  reduce using rule 4 (definition_or_statement)


State 26

   56 statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 70


State 27

   16 expression: logical_or_expression .
   20 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 71

    $default  reduce using rule 16 (expression)


State 28

   19 logical_or_expression: logical_and_expression .
   22 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 72

    $default  reduce using rule 19 (logical_or_expression)


State 29

   21 logical_and_expression: equality_expression .
   24 equality_expression: equality_expression . EQ relational_expression
   25                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 73
    NE  shift, and go to state 74

    $default  reduce using rule 21 (logical_and_expression)


State 30

   23 equality_expression: relational_expression .
   27 relational_expression: relational_expression . GT additive_expression
   28                      | relational_expression . GE additive_expression
   29                      | relational_expression . LT additive_expression
   30                      | relational_expression . LE additive_expression

    GT  shift, and go to state 75
    GE  shift, and go to state 76
    LT  shift, and go to state 77
    LE  shift, and go to state 78

    $default  reduce using rule 23 (equality_expression)


State 31

   26 relational_expression: additive_expression .
   32 additive_expression: additive_expression . ADD multiplicative_expression
   33                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80

    $default  reduce using rule 26 (relational_expression)


State 32

   31 additive_expression: multiplicative_expression .
   35 multiplicative_expression: multiplicative_expression . MUL unary_expression
   36                          | multiplicative_expression . DIV unary_expression
   37                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 31 (additive_expression)


State 33

   34 multiplicative_expression: unary_expression .

    $default  reduce using rule 34 (multiplicative_expression)


State 34

   17 expression: primary_expression . ASSIGN expression
   38 unary_expression: primary_expression .

    ASSIGN  shift, and go to state 84

    $default  reduce using rule 38 (unary_expression)


State 35

   53 primary_expression: closure_definition .

    $default  reduce using rule 53 (primary_expression)


State 36

    5 definition_or_statement: statement .

    $default  reduce using rule 5 (definition_or_statement)


State 37

   57 statement: global_statement .

    $default  reduce using rule 57 (statement)


State 38

   58 statement: let_statement .

    $default  reduce using rule 58 (statement)


State 39

   59 statement: if_statement .

    $default  reduce using rule 59 (statement)


State 40

   60 statement: while_statement .

    $default  reduce using rule 60 (statement)


State 41

   61 statement: for_statement .

    $default  reduce using rule 61 (statement)


State 42

   62 statement: return_statement .

    $default  reduce using rule 62 (statement)


State 43

   63 statement: break_statement .

    $default  reduce using rule 63 (statement)


State 44

   64 statement: continue_statement .

    $default  reduce using rule 64 (statement)


State 45

   18 expression: error RP .

    $default  reduce using rule 18 (expression)


State 46

   40 primary_expression: IDENTIFIER LP . argument_list RP
   41                   | IDENTIFIER LP . RP

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    RP              shift, and go to state 85
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    argument_list              go to state 86
    expression                 go to state 87
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 47

   42 primary_expression: IDENTIFIER LB . primary_expression RB

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    NEW             shift, and go to state 21

    primary_expression  go to state 88
    closure_definition  go to state 35


State 48

   43 primary_expression: IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 89


State 49

   67 identifier_list: IDENTIFIER .

    $default  reduce using rule 67 (identifier_list)


State 50

   65 global_statement: GLOBAL_T identifier_list . SEMICOLON
   68 identifier_list: identifier_list . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 90
    COMMA      shift, and go to state 91


State 51

   66 let_statement: LET identifier_list . SEMICOLON
   68 identifier_list: identifier_list . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 92
    COMMA      shift, and go to state 91


State 52

    6 function_definition: FUNCTION IDENTIFIER . LP parameter_list RP block
    7                    | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 93


State 53

    8 class_definition: CLASS IDENTIFIER . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 96


State 54

   79 expression_opt: expression .

    $default  reduce using rule 79 (expression_opt)


State 55

   80 return_statement: RETURN_T expression_opt . SEMICOLON

    SEMICOLON  shift, and go to state 97


State 56

   69 if_statement: IF LP . expression RP block
   70             | IF LP . expression RP block ELSE block
   71             | IF LP . expression RP block elsif_list
   72             | IF LP . expression RP block elsif_list ELSE block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 98
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 57

   77 for_statement: FOR LP . expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    SEMICOLON  reduce using rule 78 (expression_opt)

    expression                 go to state 54
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    expression_opt             go to state 99


State 58

   76 while_statement: WHILE LP . expression RP block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 100
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 59

   81 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 81 (break_statement)


State 60

   82 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 82 (continue_statement)


State 61

    9 parameter_list: LET . IDENTIFIER
   10               | LET . IDENTIFIER LB RB
   11               | LET . IDENTIFIER COMMA parameter_list

    IDENTIFIER  shift, and go to state 101


State 62

   55 closure_definition: LP RP . CLOSURE block

    CLOSURE  shift, and go to state 102


State 63

   54 closure_definition: LP parameter_list . RP CLOSURE block

    RP  shift, and go to state 103


State 64

   45 primary_expression: LP expression . RP

    RP  shift, and go to state 104


State 65

   39 unary_expression: SUB unary_expression .

    $default  reduce using rule 39 (unary_expression)


State 66

   38 unary_expression: primary_expression .

    $default  reduce using rule 38 (unary_expression)


State 67

   44 primary_expression: NEW IDENTIFIER . LP RP

    LP  shift, and go to state 105


State 68

    0 $accept: translation_unit $end .

    $default  accept


State 69

    2 translation_unit: translation_unit definition_or_statement .

    $default  reduce using rule 2 (translation_unit)


State 70

   56 statement: expression SEMICOLON .

    $default  reduce using rule 56 (statement)


State 71

   20 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    logical_and_expression     go to state 106
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 72

   22 logical_and_expression: logical_and_expression LOGICAL_AND . equality_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    equality_expression        go to state 107
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 73

   24 equality_expression: equality_expression EQ . relational_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    relational_expression      go to state 108
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 74

   25 equality_expression: equality_expression NE . relational_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    relational_expression      go to state 109
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 75

   27 relational_expression: relational_expression GT . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    additive_expression        go to state 110
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 76

   28 relational_expression: relational_expression GE . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    additive_expression        go to state 111
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 77

   29 relational_expression: relational_expression LT . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    additive_expression        go to state 112
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 78

   30 relational_expression: relational_expression LE . additive_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    additive_expression        go to state 113
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 79

   32 additive_expression: additive_expression ADD . multiplicative_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    multiplicative_expression  go to state 114
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 80

   33 additive_expression: additive_expression SUB . multiplicative_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    multiplicative_expression  go to state 115
    unary_expression           go to state 33
    primary_expression         go to state 66
    closure_definition         go to state 35


State 81

   35 multiplicative_expression: multiplicative_expression MUL . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    unary_expression    go to state 116
    primary_expression  go to state 66
    closure_definition  go to state 35


State 82

   36 multiplicative_expression: multiplicative_expression DIV . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    unary_expression    go to state 117
    primary_expression  go to state 66
    closure_definition  go to state 35


State 83

   37 multiplicative_expression: multiplicative_expression MOD . unary_expression

    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    unary_expression    go to state 118
    primary_expression  go to state 66
    closure_definition  go to state 35


State 84

   17 expression: primary_expression ASSIGN . expression

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 119
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 85

   41 primary_expression: IDENTIFIER LP RP .

    $default  reduce using rule 41 (primary_expression)


State 86

   13 argument_list: argument_list . COMMA expression
   40 primary_expression: IDENTIFIER LP argument_list . RP

    RP     shift, and go to state 120
    COMMA  shift, and go to state 121


State 87

   12 argument_list: expression .

    $default  reduce using rule 12 (argument_list)


State 88

   42 primary_expression: IDENTIFIER LB primary_expression . RB

    RB  shift, and go to state 122


State 89

   43 primary_expression: IDENTIFIER DOT IDENTIFIER .

    $default  reduce using rule 43 (primary_expression)


State 90

   65 global_statement: GLOBAL_T identifier_list SEMICOLON .

    $default  reduce using rule 65 (global_statement)


State 91

   68 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 123


State 92

   66 let_statement: LET identifier_list SEMICOLON .

    $default  reduce using rule 66 (let_statement)


State 93

    6 function_definition: FUNCTION IDENTIFIER LP . parameter_list RP block
    7                    | FUNCTION IDENTIFIER LP . RP block

    LET  shift, and go to state 61
    RP   shift, and go to state 124

    parameter_list  go to state 125


State 94

   85 block: error . RC

    RC  shift, and go to state 126


State 95

   83 block: LC . statement_list RC
   84      | LC . RC

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    RETURN_T        shift, and go to state 10
    IF              shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    FOR             shift, and go to state 15
    WHILE           shift, and go to state 16
    BREAK           shift, and go to state 17
    CONTINUE        shift, and go to state 18
    LP              shift, and go to state 19
    RC              shift, and go to state 127
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    statement_list             go to state 128
    expression                 go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    statement                  go to state 129
    global_statement           go to state 37
    let_statement              go to state 38
    if_statement               go to state 39
    while_statement            go to state 40
    for_statement              go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44


State 96

    8 class_definition: CLASS IDENTIFIER block .

    $default  reduce using rule 8 (class_definition)


State 97

   80 return_statement: RETURN_T expression_opt SEMICOLON .

    $default  reduce using rule 80 (return_statement)


State 98

   69 if_statement: IF LP expression . RP block
   70             | IF LP expression . RP block ELSE block
   71             | IF LP expression . RP block elsif_list
   72             | IF LP expression . RP block elsif_list ELSE block

    RP  shift, and go to state 130


State 99

   77 for_statement: FOR LP expression_opt . SEMICOLON expression_opt SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 131


State 100

   76 while_statement: WHILE LP expression . RP block

    RP  shift, and go to state 132


State 101

    9 parameter_list: LET IDENTIFIER .
   10               | LET IDENTIFIER . LB RB
   11               | LET IDENTIFIER . COMMA parameter_list

    LB     shift, and go to state 133
    COMMA  shift, and go to state 134

    $default  reduce using rule 9 (parameter_list)


State 102

   55 closure_definition: LP RP CLOSURE . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 135


State 103

   54 closure_definition: LP parameter_list RP . CLOSURE block

    CLOSURE  shift, and go to state 136


State 104

   45 primary_expression: LP expression RP .

    $default  reduce using rule 45 (primary_expression)


State 105

   44 primary_expression: NEW IDENTIFIER LP . RP

    RP  shift, and go to state 137


State 106

   20 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .
   22 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 72

    $default  reduce using rule 20 (logical_or_expression)


State 107

   22 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression .
   24 equality_expression: equality_expression . EQ relational_expression
   25                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 73
    NE  shift, and go to state 74

    $default  reduce using rule 22 (logical_and_expression)


State 108

   24 equality_expression: equality_expression EQ relational_expression .
   27 relational_expression: relational_expression . GT additive_expression
   28                      | relational_expression . GE additive_expression
   29                      | relational_expression . LT additive_expression
   30                      | relational_expression . LE additive_expression

    GT  shift, and go to state 75
    GE  shift, and go to state 76
    LT  shift, and go to state 77
    LE  shift, and go to state 78

    $default  reduce using rule 24 (equality_expression)


State 109

   25 equality_expression: equality_expression NE relational_expression .
   27 relational_expression: relational_expression . GT additive_expression
   28                      | relational_expression . GE additive_expression
   29                      | relational_expression . LT additive_expression
   30                      | relational_expression . LE additive_expression

    GT  shift, and go to state 75
    GE  shift, and go to state 76
    LT  shift, and go to state 77
    LE  shift, and go to state 78

    $default  reduce using rule 25 (equality_expression)


State 110

   27 relational_expression: relational_expression GT additive_expression .
   32 additive_expression: additive_expression . ADD multiplicative_expression
   33                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80

    $default  reduce using rule 27 (relational_expression)


State 111

   28 relational_expression: relational_expression GE additive_expression .
   32 additive_expression: additive_expression . ADD multiplicative_expression
   33                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80

    $default  reduce using rule 28 (relational_expression)


State 112

   29 relational_expression: relational_expression LT additive_expression .
   32 additive_expression: additive_expression . ADD multiplicative_expression
   33                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80

    $default  reduce using rule 29 (relational_expression)


State 113

   30 relational_expression: relational_expression LE additive_expression .
   32 additive_expression: additive_expression . ADD multiplicative_expression
   33                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 79
    SUB  shift, and go to state 80

    $default  reduce using rule 30 (relational_expression)


State 114

   32 additive_expression: additive_expression ADD multiplicative_expression .
   35 multiplicative_expression: multiplicative_expression . MUL unary_expression
   36                          | multiplicative_expression . DIV unary_expression
   37                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 32 (additive_expression)


State 115

   33 additive_expression: additive_expression SUB multiplicative_expression .
   35 multiplicative_expression: multiplicative_expression . MUL unary_expression
   36                          | multiplicative_expression . DIV unary_expression
   37                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 81
    DIV  shift, and go to state 82
    MOD  shift, and go to state 83

    $default  reduce using rule 33 (additive_expression)


State 116

   35 multiplicative_expression: multiplicative_expression MUL unary_expression .

    $default  reduce using rule 35 (multiplicative_expression)


State 117

   36 multiplicative_expression: multiplicative_expression DIV unary_expression .

    $default  reduce using rule 36 (multiplicative_expression)


State 118

   37 multiplicative_expression: multiplicative_expression MOD unary_expression .

    $default  reduce using rule 37 (multiplicative_expression)


State 119

   17 expression: primary_expression ASSIGN expression .

    $default  reduce using rule 17 (expression)


State 120

   40 primary_expression: IDENTIFIER LP argument_list RP .

    $default  reduce using rule 40 (primary_expression)


State 121

   13 argument_list: argument_list COMMA . expression

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 138
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 122

   42 primary_expression: IDENTIFIER LB primary_expression RB .

    $default  reduce using rule 42 (primary_expression)


State 123

   68 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 68 (identifier_list)


State 124

    7 function_definition: FUNCTION IDENTIFIER LP RP . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 139


State 125

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list . RP block

    RP  shift, and go to state 140


State 126

   85 block: error RC .

    $default  reduce using rule 85 (block)


State 127

   84 block: LC RC .

    $default  reduce using rule 84 (block)


State 128

   15 statement_list: statement_list . statement
   83 block: LC statement_list . RC

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    GLOBAL_T        shift, and go to state 6
    LET             shift, and go to state 7
    RETURN_T        shift, and go to state 10
    IF              shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    FOR             shift, and go to state 15
    WHILE           shift, and go to state 16
    BREAK           shift, and go to state 17
    CONTINUE        shift, and go to state 18
    LP              shift, and go to state 19
    RC              shift, and go to state 141
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    statement                  go to state 142
    global_statement           go to state 37
    let_statement              go to state 38
    if_statement               go to state 39
    while_statement            go to state 40
    for_statement              go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44


State 129

   14 statement_list: statement .

    $default  reduce using rule 14 (statement_list)


State 130

   69 if_statement: IF LP expression RP . block
   70             | IF LP expression RP . block ELSE block
   71             | IF LP expression RP . block elsif_list
   72             | IF LP expression RP . block elsif_list ELSE block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 143


State 131

   77 for_statement: FOR LP expression_opt SEMICOLON . expression_opt SEMICOLON expression_opt RP block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    SEMICOLON  reduce using rule 78 (expression_opt)

    expression                 go to state 54
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    expression_opt             go to state 144


State 132

   76 while_statement: WHILE LP expression RP . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 145


State 133

   10 parameter_list: LET IDENTIFIER LB . RB

    RB  shift, and go to state 146


State 134

   11 parameter_list: LET IDENTIFIER COMMA . parameter_list

    LET  shift, and go to state 61

    parameter_list  go to state 147


State 135

   55 closure_definition: LP RP CLOSURE block .

    $default  reduce using rule 55 (closure_definition)


State 136

   54 closure_definition: LP parameter_list RP CLOSURE . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 148


State 137

   44 primary_expression: NEW IDENTIFIER LP RP .

    $default  reduce using rule 44 (primary_expression)


State 138

   13 argument_list: argument_list COMMA expression .

    $default  reduce using rule 13 (argument_list)


State 139

    7 function_definition: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 7 (function_definition)


State 140

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 149


State 141

   83 block: LC statement_list RC .

    $default  reduce using rule 83 (block)


State 142

   15 statement_list: statement_list statement .

    $default  reduce using rule 15 (statement_list)


State 143

   69 if_statement: IF LP expression RP block .
   70             | IF LP expression RP block . ELSE block
   71             | IF LP expression RP block . elsif_list
   72             | IF LP expression RP block . elsif_list ELSE block

    ELSE   shift, and go to state 150
    ELSIF  shift, and go to state 151

    $default  reduce using rule 69 (if_statement)

    elsif_list  go to state 152
    elsif       go to state 153


State 144

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt . SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 154


State 145

   76 while_statement: WHILE LP expression RP block .

    $default  reduce using rule 76 (while_statement)


State 146

   10 parameter_list: LET IDENTIFIER LB RB .

    $default  reduce using rule 10 (parameter_list)


State 147

   11 parameter_list: LET IDENTIFIER COMMA parameter_list .

    $default  reduce using rule 11 (parameter_list)


State 148

   54 closure_definition: LP parameter_list RP CLOSURE block .

    $default  reduce using rule 54 (closure_definition)


State 149

    6 function_definition: FUNCTION IDENTIFIER LP parameter_list RP block .

    $default  reduce using rule 6 (function_definition)


State 150

   70 if_statement: IF LP expression RP block ELSE . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 155


State 151

   75 elsif: ELSIF . LP expression RP block

    LP  shift, and go to state 156


State 152

   71 if_statement: IF LP expression RP block elsif_list .
   72             | IF LP expression RP block elsif_list . ELSE block
   74 elsif_list: elsif_list . elsif

    ELSE   shift, and go to state 157
    ELSIF  shift, and go to state 151

    $default  reduce using rule 71 (if_statement)

    elsif  go to state 158


State 153

   73 elsif_list: elsif .

    $default  reduce using rule 73 (elsif_list)


State 154

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON . expression_opt RP block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    RP  reduce using rule 78 (expression_opt)

    expression                 go to state 54
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35
    expression_opt             go to state 159


State 155

   70 if_statement: IF LP expression RP block ELSE block .

    $default  reduce using rule 70 (if_statement)


State 156

   75 elsif: ELSIF LP . expression RP block

    error           shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    DOUBLE_LITERAL  shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    NULL_T          shift, and go to state 14
    LP              shift, and go to state 19
    SUB             shift, and go to state 20
    NEW             shift, and go to state 21

    expression                 go to state 160
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    primary_expression         go to state 34
    closure_definition         go to state 35


State 157

   72 if_statement: IF LP expression RP block elsif_list ELSE . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 161


State 158

   74 elsif_list: elsif_list elsif .

    $default  reduce using rule 74 (elsif_list)


State 159

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt . RP block

    RP  shift, and go to state 162


State 160

   75 elsif: ELSIF LP expression . RP block

    RP  shift, and go to state 163


State 161

   72 if_statement: IF LP expression RP block elsif_list ELSE block .

    $default  reduce using rule 72 (if_statement)


State 162

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 164


State 163

   75 elsif: ELSIF LP expression RP . block

    error  shift, and go to state 94
    LC     shift, and go to state 95

    block  go to state 165


State 164

   77 for_statement: FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block .

    $default  reduce using rule 77 (for_statement)


State 165

   75 elsif: ELSIF LP expression RP block .

    $default  reduce using rule 75 (elsif)
